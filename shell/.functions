# Docker
function ssh-docker() {
   docker exec -it "$@" bash
}

# Create a new directory and enter it
function mkd() {
   mkdir -p "$@" && cd "$@"
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

#shortcut for zhs quick-look command
function ql() {
   quick-look "$1"
}

function archive () {
   zip -r "$1".zip -i "$1" ;
}

function removehost() {
   ssh-keygen -R "$1"
}

function weather() {
   city="$1"

   if [ -z "$city" ]; then
      city="Nyon"
   fi

   eval "curl http://wttr.in/${city}"
}

# Scrape a single webpage with all assets
function scrapeUrl() {
    wget --adjust-extension --convert-links --page-requisites --span-hosts --no-host-directories "$1"
}

#  Commit everything
function commit() {
  commitMessage="$1"

  if [ "$commitMessage" = "" ]; then
     commitMessage="wip"
  fi

  git add .
  eval "git commit -a -m '${commitMessage}'"
}

# Squash all commits into single one with default message
function squash() {
    git reset $(git commit-tree HEAD^{tree} -m \"\${1:-wip}");
}

#  Toggle xdebug
function xdebug() {
    currentPhpVersion=$(php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;")
    iniFileLocation="/opt/homebrew/etc/php/${currentPhpVersion}/php.ini";

    currentLine=`cat $iniFileLocation | grep xdebug.so`

    if [[ $currentLine =~ ^#zend_extension ]];
    then
        sed -i -e 's/^#zend_extension/zend_extension/g' $iniFileLocation
        echo "xdebug is now active";
    else
        sed -i -e 's/^zend_extension/#zend_extension/g' $iniFileLocation
        echo "xdebug is now inactive";
    fi
}

function db {
    if [ "$1" = "refresh" ]; then
        mysql -uroot -e "drop database $2; create database $2"
    elif [ "$1" = "create" ]; then
        mysql -uroot -e "create database $2"
    elif [ "$1" = "drop" ]; then
        mysql -uroot -e "drop database $2"
    fi
}

function opendb () {
   [ ! -f .env ] && { echo "No .env file found."; exit 1; }

   DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)


   DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

   echo "Opening ${DB_URL}"
   open $DB_URL
}

function scheduler () {
    while :; do
        php artisan schedule:run
        echo "Sleeping 60 seconds..."
        sleep 60
    done
}

function silent() {
   "$@" >& /dev/null
}

#
# `$ clink '../path' 'owner/repo-name'`
#
function clink() {
    # Get path from args or guess it
    if [ -d "$1" ]; then
        REPO="$1"
    else
        echo "Unable to find the given repository."
        return
    fi

    # Generate random string
    RANDOM_STRING=$(base64 /dev/urandom | tr -d '/+' | dd bs=6 count=1 2>/dev/null)

    # Set Composer repo
    composer config repositories.${RANDOM_STRING} '{"type": "path", "url": "'${REPO}'"}'

    # Require repository
    composer require $2
}

function ufork() {
    git fetch upstream
    git checkout $1
    git rebase upstream/$1
    git push --force origin $1
}

function merge2prod() {
    git checkout production
    git merge staging
    git push
    git checkout staging
}

function p() {
    if [ -f vendor/bin/pest ]; then
       vendor/bin/pest "$@"
    else
       vendor/bin/phpunit "$@"
    fi
 }

function pf() {
    if [ -f vendor/bin/pest ]; then
       vendor/bin/pest --filter "$@"
    else
       vendor/bin/phpunit --filter "$@"
    fi
 }

# SampleNinja
function ninja() {
    cd aws/dockerdevbox
    docker-compose $@
    cd ../..
}
